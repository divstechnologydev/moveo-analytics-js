(function (window) {
  // Prevent multiple initializations
  if (window.MoveoOne) return;

  const API_URL = "https://api.moveo.one/api/analytic/event";

  /**
   * Core MoveoOne Web Tracker
   */
  class MoveoOneWeb {
    constructor(token) {
      this.token = token;
      this.userId = "";
      this.buffer = [];
      this.flushInterval = 10000;
      this.maxThreshold = 500;
      this.context = window.location.pathname;
      this.sessionId = this.generateUUID();
      this.started = false;

      // Start flush interval
      setInterval(() => this.flush(), this.flushInterval);
    }

    initialize() {
      this.start();
      // Start session
      this.track("page_view", {
        semanticGroup: "navigation",
        id: window.location.pathname,
        type: "page",
        action: "view",
        value: document.title,
      });

      // Setup event listeners
      this.setupClickTracking();
      this.setupScrollTracking();
      this.setupFormTracking();
    }

    identify(userId) {
      this.userId = userId;
    }

    track(type, data) {
      const event = {
        c: this.context,
        type: "track",
        userId: this.userId,
        t: Date.now(),
        prop: {
          sg: data.semanticGroup,
          eID: data.id,
          eA: data.action,
          eT: data.type,
          eV: data.value || "",
        },
        meta: data.metadata || {},
        sId: this.sessionId,
      };

      this.buffer.push(event);

      if (this.buffer.length >= this.maxThreshold) {
        this.flush();
      }
    }

    updateMetadata(metadata) {
      // Append to all events in the buffer
      this.buffer = this.buffer.map((event) => ({
        ...event,
        meta: {
          ...event.meta,
          ...metadata,
        },
      }));
    }

    enrichWithGeolocation() {
      return fetch("https://ipapi.co/json/")
        .then((response) => response.json())
        .then((location) => ({
          // only the country name, as a string
          location: location.country_name || "",
        }))
        .catch((err) => {
          console.warn("MoveoOne: Failed to enrich geolocation", err);
          return { location: "" };
        });
    }

    async start() {
      const event = {
        c: this.context,
        type: "start_session",
        userId: this.userId,
        t: Date.now(),
        prop: {},
        meta: {},
        sId: this.sessionId,
      };

      const params = new URLSearchParams(window.location.search);
      const utmSource = params.get("utm_source") || "";
      const utmMedium = params.get("utm_medium") || "";
      const utmCampaign = params.get("utm_campaign") || "";

      const basicMeta = {
        userAgent: navigator.userAgent,
        platform: navigator.platform,
        language: navigator.language || navigator.userLanguage,
        screenResolution: `${window.screen.width}x${window.screen.height}`,
        viewportSize: `${window.innerWidth}x${window.innerHeight}`,
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        referrer: document.referrer || "",
        utm_source: utmSource,
        utm_medium: utmMedium,
        utm_campaign: utmCampaign,
        returningVisitor: localStorage.getItem("moveo-returning") || "false",
      };

      if (!localStorage.getItem("moveo-returning")) {
        localStorage.setItem("moveo-returning", "true");
      }

      const geoMeta = await this.enrichWithGeolocation();

      event.meta = {
        ...basicMeta,
        location: geoMeta.location,
      };

      this.buffer.push(event);
      this.flush();
    }

    flush() {
      if (this.buffer.length === 0) return;

      const dataToSend = [...this.buffer];
      this.buffer = [];

      fetch(API_URL, {
        method: "POST",
        headers: {
          Authorization: this.token,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ events: dataToSend }),
      }).catch((error) => console.error("MoveoOne Error:", error));
    }

    setupClickTracking() {
      document.addEventListener("click", (event) => {
        let target = event.target;
        let elementType = target.tagName.toLowerCase();

        // Find closest clickable parent if target itself isn't clickable
        if (!["a", "button", "input", "select"].includes(elementType)) {
          target = target.closest(
            'a, button, input[type="button"], input[type="submit"], select'
          );
          if (!target) return;
          elementType = target.tagName.toLowerCase();
        }

        const data = {
          semanticGroup: "interaction",
          id: target.id || target.name || target.href || "unnamed_element",
          type: elementType,
          action: "click",
          value: target.textContent?.trim() || target.value || "",
          metadata: {
            path: `${this.getElementPath(target)}`,
            href: `${target.href}`,
          },
        };

        this.track("click", data);
      });
    }

    setupScrollTracking() {
      let lastScrollPosition = 0;
      let scrollTimeout;

      window.addEventListener("scroll", () => {
        clearTimeout(scrollTimeout);

        scrollTimeout = setTimeout(() => {
          const scrollPosition = window.scrollY;
          const scrollPercentage = Math.round(
            (scrollPosition /
              (document.documentElement.scrollHeight - window.innerHeight)) *
              100
          );

          if (Math.abs(scrollPosition - lastScrollPosition) > 100) {
            this.track("scroll", {
              semanticGroup: "interaction",
              id: "page_scroll",
              type: "scroll",
              action: "scroll",
              value: scrollPercentage.toString(),
              metadata: {
                position: `${scrollPosition}`,
              },
            });

            lastScrollPosition = scrollPosition;
          }
        }, 500);
      });
    }

    setupFormTracking() {
      document.addEventListener("submit", (event) => {
        const form = event.target;

        this.track("form_submit", {
          semanticGroup: "interaction",
          id: form.id || form.name || "unnamed_form",
          type: "form",
          action: "submit",
          value: "",
          metadata: {
            path: `${this.getElementPath(form)}`,
          },
        });
      });

      document.addEventListener("change", (event) => {
        const target = event.target;
        if (
          ["select", "input", "textarea"].includes(target.tagName.toLowerCase())
        ) {
          this.track("form_change", {
            semanticGroup: "interaction",
            id: target.id || target.name || "unnamed_input",
            type: target.type || target.tagName.toLowerCase(),
            action: "change",
            value: target.type === "password" ? "[REDACTED]" : target.value,
            metadata: {
              path: `${this.getElementPath(target)}`,
            },
          });
        }
      });
    }

    getElementPath(element) {
      const path = [];
      while (element && element.nodeType === Node.ELEMENT_NODE) {
        let selector = element.nodeName.toLowerCase();
        if (element.id) {
          selector += "#" + element.id;
        } else if (element.className) {
          selector += "." + element.className.replace(/\s+/g, ".");
        }
        path.unshift(selector);
        element = element.parentNode;
      }
      return path.join(" > ");
    }

    generateUUID() {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
        /[xy]/g,
        function (c) {
          const r = (Math.random() * 16) | 0;
          const v = c === "x" ? r : (r & 0x3) | 0x8;
          return v.toString(16);
        }
      );
    }
  }

  // Global initialization function
  window.MoveoOne = {
    init: function (token) {
      const instance = new MoveoOneWeb(token);
      instance.initialize();
      return instance;
    },
  };
})(window);
